import pandas as pd
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.feature_selection import SelectFromModel
from sklearn.model_selection import cross_val_score
import logging
from scipy import stats
import statsmodels.api as sm

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class FeatureSelector:
    def __init__(self, univariate_threshold=0.2, multivariate_threshold=0.05):
        self.univariate_threshold = univariate_threshold
        self.multivariate_threshold = multivariate_threshold
        self.selected_features = None
        
    def univariate_feature_selection(self, X, y):
        """
        Perform univariate feature selection using chi-square test
        Select features with p-value < 0.2
        """
        selected_features = []
        p_values = []
        
        for feature in X.columns:
            # Chi-square test for categorical features
            contingency_table = pd.crosstab(X[feature], y)
            chi2, p_val, dof, expected = stats.chi2_contingency(contingency_table)
            
            if p_val < self.univariate_threshold:
                selected_features.append(feature)
                p_values.append(p_val)
        
        logger.info(f"Univariate selection: {len(selected_features)} features selected "
                   f"from {X.shape[1]} total features")
        
        return selected_features, p_values
    
    def lasso_feature_selection(self, X, y, cv_folds=5):
        """
        Perform LASSO feature selection with cross-validation
        """
        from sklearn.linear_model import LassoCV
        
        # Standardize features for LASSO
        from sklearn.preprocessing import StandardScaler
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)
        
        # LASSO with cross-validation
        lasso = LassoCV(cv=cv_folds, random_state=42, max_iter=10000)
        lasso.fit(X_scaled, y)
        
        # Get selected features (non-zero coefficients)
        selected_mask = lasso.coef_ != 0
        selected_features = X.columns[selected_mask].tolist()
        
        logger.info(f"LASSO selection: {len(selected_features)} features selected")
        
        return selected_features, lasso
    
    def select_features(self, X, y, method='univariate'):
        """
        Main feature selection method
        """
        if method == 'univariate':
            selected_features, p_values = self.univariate_feature_selection(X, y)
            self.selected_features = selected_features
            return selected_features, p_values
        
        elif method == 'lasso':
            selected_features, lasso_model = self.lasso_feature_selection(X, y)
            self.selected_features = selected_features
            return selected_features, lasso_model
        
        else:
            raise ValueError("Method must be 'univariate' or 'lasso'")
